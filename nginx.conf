
# Nginx configuration for Chrome Remote Debugging Reverse Proxy
# Supports WebSocket connections to headless Chrome instances
# Port range: 48000-49000 for Chrome debugging
# Health check endpoint on port 80

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    types_hash_bucket_size 128;
    server_tokens off;

    # Buffer sizes for WebSocket optimization
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Gzip compression (disabled for WebSocket connections)
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting zones for security
    limit_req_zone $binary_remote_addr zone=chrome_debug:10m rate=10r/s;
    limit_conn_zone $binary_remote_addr zone=chrome_conn:10m;

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Security headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Include Chrome debugger proxy configurations
    include /etc/nginx/conf.d/*.conf;
# Port range configuration for 48100-49000
# Same-port redirection: each port redirects to itself
server {
    listen 48300-48400; # Listen on IPv4 port range 48100-49000
    listen [::]:48300-48400; # Listen on IPv6 port range 48100-49000

    # Server identification
    server_name _; # Default server (catch-all) for any hostname
    
    # Custom error pages for better user experience
    error_page 502 503 504 /50x.html; # Redirect server errors to custom page
    location = /50x.html {
        root /usr/share/nginx/html; # Document root for error pages
        internal; # Only accessible via internal redirects
        add_header Content-Type text/html; # Set content type for error page
        return 200 '<!DOCTYPE html>
<html>
<head><title>Service Unavailable</title></head>
<body>
<h1>Service Connection Error</h1>
<p>The service is currently unavailable on this port. Please ensure:</p>
<ul>
<li>The target service is running on port $server_port</li>
<li>The service is accessible on localhost:$server_port</li>
<li>No firewall is blocking the connection</li>
</ul>
<p>Error Code: $status</p>
</body>
</html>';
    }

    # Health check endpoint
    location /health {
        access_log off; # Don't log health check requests
        return 200 "nginx proxy healthy on port $server_port\n"; # Return success status with port info
        add_header Content-Type text/plain; # Set plain text content type
    }

    # Main proxy configuration for port range
    location / {
        # Proxy to the same port the request came in on
        proxy_pass http://127.0.0.1:$server_port; # Forward requests to local service on same port
        
        # Essential headers for proper client identification
        proxy_set_header Host $host; # Pass original host header
        proxy_set_header X-Real-IP $remote_addr; # Pass client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Chain of proxy IPs
        proxy_set_header X-Forwarded-Proto $scheme; # Original request protocol (http/https)
        proxy_set_header X-Forwarded-Host $server_name; # Original host name
        proxy_set_header X-Forwarded-Port $server_port; # Original port number

        # WebSocket support - Critical for real-time communication
        proxy_http_version 1.1; # Use HTTP/1.1 for WebSocket support
        proxy_set_header Upgrade $http_upgrade; # Pass WebSocket upgrade header
        proxy_set_header Connection $connection_upgrade; # Pass connection upgrade header
        
        # Disable proxy buffering for real-time communication
        proxy_buffering off; # Disable response buffering for real-time data
        proxy_cache off; # Disable caching for dynamic content
        
        # Timeout settings for long-lived connections
        proxy_connect_timeout 60s; # Max time to establish upstream connection
        proxy_send_timeout 300s; # Max time to send data to upstream (5 minutes)
        proxy_read_timeout 300s; # Max time to receive data from upstream (5 minutes)
        
        # Handle connection drops gracefully
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # Conditions to try next upstream
        proxy_next_upstream_tries 1; # Maximum retry attempts
        proxy_next_upstream_timeout 0; # No timeout limit for upstream retries

        # Security: Prevent proxy loops
        proxy_redirect off; # Don't rewrite redirect responses
        
        # Custom logging for debugging
        access_log /var/log/nginx/port_range_access.log main; # Dedicated access log
        error_log /var/log/nginx/port_range_error.log; # Dedicated error log
    }

    # WebSocket endpoint for port range
    location /ws {
        # Proxy WebSocket connections to same port
        proxy_pass http://127.0.0.1:$server_port; # Forward WebSocket requests to same port
        
        # WebSocket specific headers
        proxy_http_version 1.1; # Required HTTP version for WebSocket
        proxy_set_header Upgrade $http_upgrade; # WebSocket upgrade header
        proxy_set_header Connection "Upgrade"; # Force connection upgrade
        proxy_set_header Host $host; # Pass original host
        proxy_set_header X-Real-IP $remote_addr; # Client's real IP
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Proxy chain IPs
        
        # Disable buffering for WebSocket
        proxy_buffering off; # No buffering for real-time WebSocket data
        proxy_cache off; # No caching for WebSocket connections
        
        # Extended timeouts for long-running connections
        proxy_connect_timeout 60s; # Connection establishment timeout
        proxy_send_timeout 600s;  # 10 minutes for long sessions
        proxy_read_timeout 600s;  # 10 minutes for long sessions
        
        # Handle WebSocket connection drops
        proxy_redirect off; # Don't modify WebSocket responses
        
        # WebSocket specific logging
        access_log /var/log/nginx/port_range_ws_access.log main; # Dedicated WebSocket access log
    }
}
}